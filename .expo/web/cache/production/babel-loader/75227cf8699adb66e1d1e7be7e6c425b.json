{"ast":null,"code":"import{processColor}from\"./Colors\";import{makeShareable}from\"./core\";import Platform from\"react-native-web/dist/exports/Platform\";var colorProps=['backgroundColor','borderBottomColor','borderColor','borderLeftColor','borderRightColor','borderTopColor','borderStartColor','borderEndColor','color','shadowColor','textDecorationColor','tintColor','textShadowColor','overlayColor'];var ColorProperties=makeShareable(colorProps);export default(function(){var _f=function _f(viewDescriptor,updates,maybeViewRef){var viewName=viewDescriptor.value.name||'RCTView';if(Platform.OS!=='web'){Object.keys(updates).forEach(function(key){if(ColorProperties.indexOf(key)!==-1){updates[key]=processColor(updates[key]);}});}var updatePropsInternal=typeof _updateProps==='undefined'?_updatePropsJS:_updateProps;updatePropsInternal(viewDescriptor.value.tag,viewName,updates,maybeViewRef);};_f._closure={Platform:{OS:Platform.OS},ColorProperties:ColorProperties,processColor:processColor,_updatePropsJS:_updatePropsJS};_f.asString=\"function updateProps(viewDescriptor,updates,maybeViewRef){const{Platform,ColorProperties,processColor,_updatePropsJS}=jsThis._closure;{var viewName=viewDescriptor.value.name||'RCTView';if(Platform.OS!=='web'){Object.keys(updates).forEach(function(key){if(ColorProperties.indexOf(key)!==-1){updates[key]=processColor(updates[key]);}});}var updatePropsInternal=typeof _updateProps==='undefined'?_updatePropsJS:_updateProps;updatePropsInternal(viewDescriptor.value.tag,viewName,updates,maybeViewRef);}}\";_f.__workletHash=5458876163987;global.__reanimatedWorkletInit(_f);return _f;})();","map":{"version":3,"sources":["C:/Users/PC NOOB/Downloads/pokepoke/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.js"],"names":["processColor","makeShareable","colorProps","ColorProperties","viewDescriptor","updates","maybeViewRef","viewName","value","name","Platform","OS","Object","keys","forEach","key","indexOf","updatePropsInternal","_updateProps","_updatePropsJS","tag"],"mappings":"AACA,OAASA,YAAT,gBACA,OAASC,aAAT,c,6DAIA,GAAMC,CAAAA,UAAU,CAAG,CACjB,iBADiB,CAEjB,mBAFiB,CAGjB,aAHiB,CAIjB,iBAJiB,CAKjB,kBALiB,CAMjB,gBANiB,CAOjB,kBAPiB,CAQjB,gBARiB,CASjB,OATiB,CAUjB,aAViB,CAWjB,qBAXiB,CAYjB,WAZiB,CAajB,iBAbiB,CAcjB,cAdiB,CAAnB,CAiBA,GAAMC,CAAAA,eAAe,CAAGF,aAAa,CAACC,UAAD,CAArC,CAEA,6CAAoCE,cAApC,CAAoDC,OAApD,CAA6DC,YAA7D,CAA2E,CAGzE,GAAMC,CAAAA,QAAQ,CAAGH,cAAc,CAACI,KAAf,CAAqBC,IAArB,EAA6B,SAA9C,CAEA,GAAIC,QAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,CACzBC,MAAM,CAACC,IAAP,CAAYR,OAAZ,EAAqBS,OAArB,CAA6B,SAACC,GAAD,CAAS,CACpC,GAAIZ,eAAe,CAACa,OAAhB,CAAwBD,GAAxB,IAAiC,CAAC,CAAtC,CAAyC,CACvCV,OAAO,CAACU,GAAD,CAAP,CAAef,YAAY,CAACK,OAAO,CAACU,GAAD,CAAR,CAA3B,CACD,CACF,CAJD,EAKD,CAED,GAAME,CAAAA,mBAAmB,CACvB,MAAOC,CAAAA,YAAP,GAAwB,WAAxB,CAAsCC,cAAtC,CAAuDD,YADzD,CAGAD,mBAAmB,CACjBb,cAAc,CAACI,KAAf,CAAqBY,GADJ,CAEjBb,QAFiB,CAGjBF,OAHiB,CAIjBC,YAJiB,CAAnB,CAMD,CAtBD,2BAnBMI,QAAQ,CAACC,EAmBf,kBAjBUR,eAiBV,cAhBuBH,YAgBvB,gBAXkEmB,cAWlE","sourcesContent":["/* global _updateProps _updatePropsJS */\nimport { processColor } from './Colors';\nimport { makeShareable } from './core';\nimport { Platform } from 'react-native';\n\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderColor',\n  'borderLeftColor',\n  'borderRightColor',\n  'borderTopColor',\n  'borderStartColor',\n  'borderEndColor',\n  'color',\n  'shadowColor',\n  'textDecorationColor',\n  'tintColor',\n  'textShadowColor',\n  'overlayColor',\n];\n\nconst ColorProperties = makeShareable(colorProps);\n\nexport default function updateProps(viewDescriptor, updates, maybeViewRef) {\n  'worklet';\n\n  const viewName = viewDescriptor.value.name || 'RCTView';\n\n  if (Platform.OS !== 'web') {\n    Object.keys(updates).forEach((key) => {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    });\n  }\n\n  const updatePropsInternal =\n    typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n\n  updatePropsInternal(\n    viewDescriptor.value.tag,\n    viewName,\n    updates,\n    maybeViewRef\n  );\n}\n"]},"metadata":{},"sourceType":"module"}